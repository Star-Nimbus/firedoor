# Default values for firedoor operator
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Image configuration
image:
  registry: ""
  repository: firedoor
  tag: ""
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# Override the chart name
nameOverride: ""
fullnameOverride: ""

# Controller configuration
controller:
  replicas: 1
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

# Metrics configuration
metrics:
  enabled: true
  port: 8080
  bindAddress: "0.0.0.0"
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: 30s
    scrapeTimeout: 10s

# Health probe configuration
healthProbe:
  port: 8081
  bindAddress: ":8081"

# Leader election
leaderElection:
  enabled: true

# OpenTelemetry configuration
openTelemetry:
  enabled: false
  exporter: otlp
  endpoint: ""
  service: firedoor-operator

# Alertmanager configuration
alertmanager:
  enabled: false
  url: "http://alertmanager.telemetry-system.svc.cluster.local:9093"
  timeout: 30s
  
  # Basic authentication
  basicAuth:
    username: ""
    password: ""
  
  # TLS configuration
  tls:
    insecureSkipVerify: false
    caFile: ""
    certFile: ""
    keyFile: ""
  
  # Alert configuration
  alert:
    # Labels to add to all alerts
    labels: {}
    # Annotations to add to all alerts
    annotations: {}
    # Alert name
    alertName: "BreakglassActive"
    # Severity level
    severity: "warning"
    # Summary template
    summary: "Breakglass access is active"
    # Description template
    description: "A breakglass access request is currently active"

# Security context for containers
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532
  seccompProfile:
    type: RuntimeDefault

# Pod security context
podSecurityContext:
  fsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532
  seccompProfile:
    type: RuntimeDefault

# Service account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# RBAC configuration
rbac:
  # Whether to create RBAC resources
  create: true

  # Enable privilege escalation mode. When enabled, the operator can grant permissions
  # that it doesn't currently hold itself. This allows the operator to grant elevated
  # access without having those permissions itself.
  # WARNING: This bypasses Kubernetes RBAC restrictions and should be used carefully.
  # Only enable if you understand the security implications.
  privilegeEscalation: false

  # List of namespaces where the operator can manage RBAC (Role/RoleBinding). If empty, no namespace restriction is applied.
  allowedNamespaces: []
  # Example:
  # allowedNamespaces:
  #   - firedoor-system

  # Core rules required for the operator to function
  # These are the minimum required permissions
  coreRules:
    # Watch & update Breakglass resources
    - apiGroups: [ "access.cloudnimbus.io" ]
      resources: [ "breakglasses" ]
      verbs: [ "get", "list", "watch", "create", "update", "patch", "delete" ]

    - apiGroups: [ "access.cloudnimbus.io" ]
      resources: [ "breakglasses/status", "breakglasses/finalizers" ]
      verbs: [ "get", "update", "patch" ]

    # Write Events
    - apiGroups: [ "" ]
      resources: [ "events" ]
      verbs: [ "create", "patch" ]

    # Leader election
    - apiGroups: [ "coordination.k8s.io" ]
      resources: [ "leases" ]
      verbs: [ "get", "list", "watch", "create", "update", "patch", "delete" ]

    # Allow the operator to mint / revoke RBAC objects
    - apiGroups: [ "rbac.authorization.k8s.io" ]
      resources: [ "roles", "rolebindings", "clusterroles", "clusterrolebindings" ]
      verbs: [ "get", "list", "watch", "create", "update", "patch", "delete" ]

  # Additional rules granted to the operator
  extraRules:
    # read ConfigMaps cluster-wide
    - apiGroups: [ "" ]
      resources: [ "configmaps" ]
      verbs: [ "get", "list", "watch", "create", "update", "patch", "delete" ]

    # read Pods
    - apiGroups: [ "" ]
      resources: [ "pods" ]
      verbs: [ "get", "list", "watch" ]

    # read Services
    - apiGroups: [ "" ]
      resources: [ "services" ]
      verbs: [ "get", "list", "watch" ]

    # read Deployments
    - apiGroups: [ "apps" ]
      resources: [ "deployments" ]
      verbs: [ "get", "list", "watch" ]

# CRD configuration
crds:
  # Whether to install CRDs
  install: true

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Priority class
priorityClassName: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  maxUnavailable: ""

# Horizontal pod autoscaler
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Webhook configuration
webhook:
  enabled: false
  port: 9443
  certManager:
    enabled: false
    issuerRef: {}

# Common labels applied to all resources
commonLabels: {}

# Common annotations applied to all resources
commonAnnotations: {}

# Log level for the operator. Valid values: debug, info, warn, error. Default: info
logLevel: info 
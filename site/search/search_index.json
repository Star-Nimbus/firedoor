{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Firedoor Documentation","text":"<p>Welcome to Firedoor, a Kubernetes Breakglass Access Management System that provides secure, time-limited access to cluster resources during emergencies or maintenance windows.</p>"},{"location":"#what-is-firedoor","title":"What is Firedoor?","text":"<p>Firedoor is a Kubernetes operator that manages \"breakglass\" access - temporary, elevated permissions that can be granted to users during critical situations. It provides:</p> <ul> <li>Time-limited access: Automatically revoke access after a specified duration</li> <li>Recurring schedules: Set up regular access windows for maintenance</li> <li>RBAC integration: Seamlessly works with Kubernetes RBAC</li> <li>Audit trails: Complete logging and monitoring of access events</li> <li>Emergency protocols: Quick access during critical situations</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#secure-access-management","title":"\ud83d\udd10 Secure Access Management","text":"<ul> <li>Granular permission control</li> <li>Time-based access windows</li> <li>Automatic access revocation</li> <li>Integration with existing RBAC policies</li> </ul>"},{"location":"#flexible-scheduling","title":"\u23f0 Flexible Scheduling","text":"<ul> <li>One-time access grants</li> <li>Recurring maintenance windows</li> <li>Cron-based scheduling</li> <li>Timezone support</li> </ul>"},{"location":"#monitoring-auditing","title":"\ud83d\udcca Monitoring &amp; Auditing","text":"<ul> <li>Comprehensive event logging</li> <li>Metrics and telemetry</li> <li>Integration with monitoring systems</li> <li>Audit trail for compliance</li> </ul>"},{"location":"#easy-deployment","title":"\ud83d\ude80 Easy Deployment","text":"<ul> <li>Helm chart for easy installation</li> <li>Operator-based management</li> <li>Custom Resource Definitions (CRDs)</li> <li>GitOps ready</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with Firedoor in minutes:</p> <pre><code># Install Firedoor using Helm\nhelm repo add firedoor https://cloud-nimbus.github.io/firedoor\nhelm install firedoor firedoor/firedoor\n\n# Create your first breakglass access\nkubectl apply -f examples/breakglass-one-time.yaml\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#emergency-access","title":"Emergency Access","text":"<p>When you need immediate access to fix critical issues:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: emergency-access\nspec:\n  schedule:\n    duration: \"1h\"\n  clusterRoles:\n    - admin\n</code></pre>"},{"location":"#maintenance-windows","title":"Maintenance Windows","text":"<p>Schedule regular access for system maintenance:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: maintenance-window\nspec:\n  schedule:\n    cron: \"0 2 * * 0\"  # Every Sunday at 2 AM\n    duration: \"4h\"\n  clusterRoles:\n    - cluster-admin\n</code></pre>"},{"location":"#development-access","title":"Development Access","text":"<p>Provide developers with temporary elevated access:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: dev-access\nspec:\n  schedule:\n    duration: \"8h\"\n  policy:\n    - namespace: \"development\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"*\"]\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Installation and basic setup</li> <li>User Guide: Core concepts and usage patterns</li> <li>Examples: Real-world usage examples</li> <li>API Reference: Complete API documentation</li> <li>Development: Contributing and development guide</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub: Star-Nimbus/firedoor</li> <li>Issues: Report bugs or request features</li> <li>Discussions: Community discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>Firedoor is licensed under the Apache License 2.0. See the LICENSE file for details.</p> <p>Ready to get started? Check out our Installation Guide!</p>"},{"location":"api/breakglass-crd/","title":"Breakglass CRD Reference","text":"<p>Complete reference for the Breakglass Custom Resource Definition.</p>"},{"location":"api/breakglass-crd/#api-version","title":"API Version","text":"<pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\n</code></pre>"},{"location":"api/breakglass-crd/#schema","title":"Schema","text":""},{"location":"api/breakglass-crd/#breakglass","title":"Breakglass","text":"Field Type Description <code>apiVersion</code> string <code>access.cloudnimbus.io/v1alpha1</code> <code>kind</code> string <code>Breakglass</code> <code>metadata</code> ObjectMeta Standard Kubernetes metadata <code>spec</code> BreakglassSpec Specification of the breakglass <code>status</code> BreakglassStatus Status of the breakglass"},{"location":"api/breakglass-crd/#breakglassspec","title":"BreakglassSpec","text":"Field Type Required Description <code>approval</code> ApprovalSpec No Approval configuration <code>clusterRoles</code> []string No List of cluster roles to grant <code>policy</code> []Policy No Namespace-specific policies <code>schedule</code> ScheduleSpec Yes Scheduling configuration"},{"location":"api/breakglass-crd/#approvalspec","title":"ApprovalSpec","text":"Field Type Required Description <code>required</code> boolean Yes Whether approval is required <code>approvers</code> []string No List of approver email addresses"},{"location":"api/breakglass-crd/#schedulespec","title":"ScheduleSpec","text":"Field Type Required Description <code>cron</code> string No Cron expression for recurring access <code>duration</code> Duration Yes Duration of access <code>end</code> Time No End time for recurring access <code>location</code> string No Timezone for scheduling <code>maxActivations</code> int32 No Maximum number of activations <code>start</code> Time No Start time for recurring access"},{"location":"api/breakglass-crd/#policy","title":"Policy","text":"Field Type Required Description <code>namespace</code> string Yes Target namespace <code>rules</code> []PolicyRule Yes RBAC rules for the namespace"},{"location":"api/breakglass-crd/#breakglassstatus","title":"BreakglassStatus","text":"Field Type Description <code>activationCount</code> int32 Number of times access has been activated <code>conditions</code> []Condition Current conditions <code>expiresAt</code> Time When access expires <code>grantedAt</code> Time When access was granted <code>nextActivationAt</code> Time Next activation time for recurring access"},{"location":"api/breakglass-crd/#condition-types","title":"Condition Types","text":"Type Description <code>Approved</code> Access has been approved <code>Expired</code> Access has expired <code>Failed</code> An error occurred <code>RecurringActive</code> Recurring access is active <code>RecurringPending</code> Recurring access is pending"},{"location":"api/breakglass-crd/#condition-reasons","title":"Condition Reasons","text":"Reason Description <code>AccessExpired</code> Access has expired <code>AccessGranted</code> Access has been granted <code>AccessRevoked</code> Access has been revoked <code>ManualApproval</code> Manually approved <code>MaxActivationsReached</code> Maximum activations reached <code>RBACForbidden</code> RBAC operation forbidden <code>RBACTimeout</code> RBAC operation timed out <code>RecurringActivated</code> Recurring access activated <code>RecurringInvalidSchedule</code> Invalid recurring schedule <code>RecurringScheduled</code> Recurring access scheduled <code>RecurringWaiting</code> Recurring access waiting <code>RevokeFailed</code> Revocation failed <code>RoleBindingFailed</code> Role binding creation failed"},{"location":"api/breakglass-crd/#examples","title":"Examples","text":""},{"location":"api/breakglass-crd/#minimal-example","title":"Minimal Example","text":"<pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: simple-access\nspec:\n  schedule:\n    duration: \"1h\"\n  clusterRoles:\n    - admin\n</code></pre>"},{"location":"api/breakglass-crd/#complete-example","title":"Complete Example","text":"<pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: complete-example\n  namespace: default\n  labels:\n    environment: production\n    team: platform\nspec:\n  approval:\n    required: true\n    approvers:\n      - \"admin@company.com\"\n      - \"security@company.com\"\n  clusterRoles:\n    - admin\n    - view\n  policy:\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"apps\"]\n          resources: [\"deployments\"]\n          verbs: [\"get\", \"list\", \"update\", \"patch\"]\n        - apiGroups: [\"\"]\n          resources: [\"pods\"]\n          verbs: [\"get\", \"list\", \"watch\"]\n  schedule:\n    cron: \"0 9 * * 1-5\"\n    duration: \"8h\"\n    start: \"2024-01-01T00:00:00Z\"\n    end: \"2024-12-31T23:59:59Z\"\n    location: \"America/New_York\"\n    maxActivations: 10\nstatus:\n  activationCount: 3\n  grantedAt: \"2024-01-15T09:00:00Z\"\n  expiresAt: \"2024-01-15T17:00:00Z\"\n  nextActivationAt: \"2024-01-16T09:00:00Z\"\n  conditions:\n    - type: \"Approved\"\n      status: \"True\"\n      reason: \"ManualApproval\"\n      message: \"Approved by admin@company.com\"\n      lastTransitionTime: \"2024-01-15T08:55:00Z\"\n    - type: \"RecurringActive\"\n      status: \"True\"\n      reason: \"RecurringActivated\"\n      message: \"Recurring breakglass activated\"\n      lastTransitionTime: \"2024-01-15T09:00:00Z\"\n</code></pre>"},{"location":"api/breakglass-crd/#validation-rules","title":"Validation Rules","text":""},{"location":"api/breakglass-crd/#required-fields","title":"Required Fields","text":"<ul> <li><code>spec.schedule.duration</code> must be specified</li> <li>At least one of <code>spec.clusterRoles</code> or <code>spec.policy</code> must be specified</li> </ul>"},{"location":"api/breakglass-crd/#duration-validation","title":"Duration Validation","text":"<ul> <li><code>spec.schedule.duration</code> must be a positive duration</li> <li>Maximum duration is 24 hours for one-time access</li> <li>No maximum duration for recurring access</li> </ul>"},{"location":"api/breakglass-crd/#cron-validation","title":"Cron Validation","text":"<ul> <li><code>spec.schedule.cron</code> must be a valid cron expression</li> <li>Supports 5-field cron format: <code>minute hour day month weekday</code></li> <li>Supports standard cron special characters: <code>*</code>, <code>,</code>, <code>-</code>, <code>/</code></li> </ul>"},{"location":"api/breakglass-crd/#timezone-validation","title":"Timezone Validation","text":"<ul> <li><code>spec.schedule.location</code> must be a valid IANA timezone</li> <li>Examples: <code>\"UTC\"</code>, <code>\"America/New_York\"</code>, <code>\"Europe/London\"</code></li> </ul>"},{"location":"api/breakglass-crd/#approval-validation","title":"Approval Validation","text":"<ul> <li><code>spec.approval.required</code> must be <code>true</code> or <code>false</code></li> <li><code>spec.approval.approvers</code> must contain valid email addresses when specified</li> </ul>"},{"location":"api/breakglass-crd/#status-conditions","title":"Status Conditions","text":"<p>The status conditions provide detailed information about the current state of the breakglass:</p> <pre><code>status:\n  conditions:\n    - type: \"Approved\"\n      status: \"True\"  # or \"False\"\n      reason: \"ManualApproval\"\n      message: \"Approved by admin@company.com\"\n      lastTransitionTime: \"2024-01-15T08:55:00Z\"\n      observedGeneration: 1\n</code></pre>"},{"location":"api/breakglass-crd/#condition-status-values","title":"Condition Status Values","text":"<ul> <li><code>\"True\"</code>: The condition is satisfied</li> <li><code>\"False\"</code>: The condition is not satisfied</li> <li><code>\"Unknown\"</code>: The condition status is unknown</li> </ul>"},{"location":"api/breakglass-crd/#common-condition-transitions","title":"Common Condition Transitions","text":"<ol> <li>Pending \u2192 Approved: When approval is granted</li> <li>Approved \u2192 RecurringActive: When recurring access activates</li> <li>RecurringActive \u2192 Expired: When access expires</li> <li>Any \u2192 Failed: When an error occurs</li> </ol>"},{"location":"api/breakglass-crd/#error-handling","title":"Error Handling","text":""},{"location":"api/breakglass-crd/#common-errors","title":"Common Errors","text":"Error Description Resolution <code>InvalidCronExpression</code> Invalid cron expression Fix the cron syntax <code>InvalidTimezone</code> Invalid timezone Use valid IANA timezone <code>InvalidDuration</code> Invalid duration Use positive duration <code>RBACError</code> RBAC operation failed Check permissions <code>ApprovalRequired</code> Approval required but not granted Grant approval"},{"location":"api/breakglass-crd/#error-recovery","title":"Error Recovery","text":"<p>Most errors are transient and will be retried automatically. For persistent errors:</p> <ol> <li>Check the breakglass status and conditions</li> <li>Review the operator logs</li> <li>Verify RBAC permissions</li> <li>Check for conflicting resources</li> </ol>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":"<p>This page provides practical examples of how to use Firedoor in common scenarios.</p>"},{"location":"examples/basic-usage/#emergency-access","title":"Emergency Access","text":""},{"location":"examples/basic-usage/#quick-emergency-fix","title":"Quick Emergency Fix","text":"<p>When you need immediate access to fix a critical issue:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: emergency-fix-2024-01-15\n  namespace: default\nspec:\n  schedule:\n    duration: \"1h\"\n  clusterRoles:\n    - admin\n  approval:\n    required: false  # For true emergencies\n</code></pre>"},{"location":"examples/basic-usage/#emergency-with-approval","title":"Emergency with Approval","text":"<p>For more controlled emergency access:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: emergency-database-access\n  namespace: default\nspec:\n  schedule:\n    duration: \"30m\"\n  policy:\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"apps\"]\n          resources: [\"deployments\", \"pods\"]\n          verbs: [\"get\", \"list\", \"update\", \"patch\"]\n  approval:\n    required: true\n    approvers:\n      - \"admin@company.com\"\n      - \"security@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#maintenance-windows","title":"Maintenance Windows","text":""},{"location":"examples/basic-usage/#weekly-maintenance","title":"Weekly Maintenance","text":"<p>Regular maintenance window every Sunday:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: weekly-maintenance\n  namespace: default\nspec:\n  schedule:\n    cron: \"0 2 * * 0\"  # Every Sunday at 2 AM\n    duration: \"4h\"\n    start: \"2024-01-01T00:00:00Z\"\n  clusterRoles:\n    - cluster-admin\n  approval:\n    required: false\n</code></pre>"},{"location":"examples/basic-usage/#daily-operations","title":"Daily Operations","text":"<p>Daily operational access for specific teams:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: daily-operations\n  namespace: default\nspec:\n  schedule:\n    cron: \"0 9 * * 1-5\"  # Weekdays at 9 AM\n    duration: \"8h\"\n    location: \"America/New_York\"\n  policy:\n    - namespace: \"monitoring\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"get\", \"list\", \"watch\"]\n    - namespace: \"logging\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"get\", \"list\", \"watch\"]\n</code></pre>"},{"location":"examples/basic-usage/#development-access","title":"Development Access","text":""},{"location":"examples/basic-usage/#temporary-development-access","title":"Temporary Development Access","text":"<p>Short-term access for development work:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: dev-access-john\n  namespace: default\nspec:\n  schedule:\n    duration: \"4h\"\n  policy:\n    - namespace: \"development\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"*\"]\n    - namespace: \"staging\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\"]\n  approval:\n    required: true\n    approvers:\n      - \"team-lead@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#feature-branch-testing","title":"Feature Branch Testing","text":"<p>Access for testing new features:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: feature-testing-v2.1\n  namespace: default\nspec:\n  schedule:\n    duration: \"2h\"\n  policy:\n    - namespace: \"feature-testing\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"*\"]\n  approval:\n    required: false\n</code></pre>"},{"location":"examples/basic-usage/#production-support","title":"Production Support","text":""},{"location":"examples/basic-usage/#on-call-access","title":"On-Call Access","text":"<p>Access for on-call engineers:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: oncall-access\n  namespace: default\nspec:\n  schedule:\n    cron: \"0 18 * * 1-5\"  # Weekdays at 6 PM\n    duration: \"12h\"\n  clusterRoles:\n    - admin\n  approval:\n    required: false\n</code></pre>"},{"location":"examples/basic-usage/#database-maintenance","title":"Database Maintenance","text":"<p>Specific access for database operations:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: database-maintenance\n  namespace: default\nspec:\n  schedule:\n    cron: \"0 3 * * 0\"  # Every Sunday at 3 AM\n    duration: \"2h\"\n  policy:\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"apps\"]\n          resources: [\"deployments\", \"statefulsets\"]\n          verbs: [\"get\", \"list\", \"update\", \"patch\"]\n        - apiGroups: [\"\"]\n          resources: [\"pods\", \"services\", \"configmaps\"]\n          verbs: [\"get\", \"list\", \"update\", \"patch\"]\n  approval:\n    required: true\n    approvers:\n      - \"dba@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#security-scenarios","title":"Security Scenarios","text":""},{"location":"examples/basic-usage/#security-incident-response","title":"Security Incident Response","text":"<p>Access for security team during incidents:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: security-incident-response\n  namespace: default\nspec:\n  schedule:\n    duration: \"6h\"\n  clusterRoles:\n    - cluster-admin\n  approval:\n    required: true\n    approvers:\n      - \"security@company.com\"\n      - \"ciso@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#compliance-audit","title":"Compliance Audit","text":"<p>Access for compliance audits:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: compliance-audit-2024\n  namespace: default\nspec:\n  schedule:\n    duration: \"8h\"\n  policy:\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"get\", \"list\", \"watch\"]\n  approval:\n    required: true\n    approvers:\n      - \"compliance@company.com\"\n      - \"audit@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#advanced-examples","title":"Advanced Examples","text":""},{"location":"examples/basic-usage/#multi-environment-access","title":"Multi-Environment Access","text":"<p>Access across multiple environments:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: cross-env-deployment\n  namespace: default\nspec:\n  schedule:\n    duration: \"2h\"\n  policy:\n    - namespace: \"staging\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"*\"]\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"apps\"]\n          resources: [\"deployments\"]\n          verbs: [\"get\", \"list\", \"update\", \"patch\"]\n  approval:\n    required: true\n    approvers:\n      - \"release-manager@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#limited-resource-access","title":"Limited Resource Access","text":"<p>Very specific resource access:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: specific-resource-access\n  namespace: default\nspec:\n  schedule:\n    duration: \"1h\"\n  policy:\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"apps\"]\n          resources: [\"deployments\"]\n          resourceNames: [\"web-app\", \"api-server\"]\n          verbs: [\"get\", \"update\", \"patch\"]\n  approval:\n    required: true\n    approvers:\n      - \"team-lead@company.com\"\n</code></pre>"},{"location":"examples/basic-usage/#monitoring-and-management","title":"Monitoring and Management","text":""},{"location":"examples/basic-usage/#check-status","title":"Check Status","text":"<pre><code># List all breakglasses\nkubectl get breakglasses\n\n# Get detailed information\nkubectl describe breakglass &lt;name&gt;\n\n# Watch for changes\nkubectl get breakglasses -w\n</code></pre>"},{"location":"examples/basic-usage/#approve-access","title":"Approve Access","text":"<pre><code># Approve a breakglass\nkubectl patch breakglass &lt;name&gt; --type='merge' -p='{\"status\":{\"conditions\":[{\"type\":\"Approved\",\"status\":\"True\",\"reason\":\"ManualApproval\",\"message\":\"Approved by admin\"}]}}'\n</code></pre>"},{"location":"examples/basic-usage/#revoke-access","title":"Revoke Access","text":"<pre><code># Delete a breakglass (immediate revocation)\nkubectl delete breakglass &lt;name&gt;\n</code></pre>"},{"location":"examples/basic-usage/#check-events","title":"Check Events","text":"<pre><code># View all breakglass events\nkubectl get events --field-selector involvedObject.kind=Breakglass\n\n# View events for specific breakglass\nkubectl get events --field-selector involvedObject.name=&lt;breakglass-name&gt;\n</code></pre>"},{"location":"examples/basic-usage/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive names that indicate purpose and date</li> <li>Set appropriate durations - not too short, not too long</li> <li>Require approval for production access</li> <li>Use namespace-specific policies when possible</li> <li>Monitor and audit all access</li> <li>Clean up expired breakglasses regularly</li> <li>Document the purpose of each breakglass</li> <li>Test breakglass configurations in non-production first</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Firedoor in your Kubernetes cluster.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (v1.20+)</li> <li>Helm 3.x</li> <li>kubectl configured to access your cluster</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-helm-chart-recommended","title":"Method 1: Helm Chart (Recommended)","text":"<ol> <li>Add the Firedoor Helm repository:</li> </ol> <pre><code>helm repo add firedoor https://cloud-nimbus.github.io/firedoor\nhelm repo update\n</code></pre> <ol> <li>Install Firedoor:</li> </ol> <pre><code>helm install firedoor firedoor/firedoor\n</code></pre> <ol> <li>Verify the installation:</li> </ol> <pre><code>kubectl get pods -n firedoor-system\nkubectl get crd breakglasses.access.cloudnimbus.io\n</code></pre>"},{"location":"getting-started/installation/#method-2-kustomize","title":"Method 2: Kustomize","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/Star-Nimbus/firedoor.git\ncd firedoor\n</code></pre> <ol> <li>Apply the manifests:</li> </ol> <pre><code>kubectl apply -k kustomize/manager\n</code></pre>"},{"location":"getting-started/installation/#method-3-direct-yaml","title":"Method 3: Direct YAML","text":"<ol> <li>Apply the CRD:</li> </ol> <pre><code>kubectl apply -f .generated/access.cloudnimbus.io_breakglasses.yaml\n</code></pre> <ol> <li>Apply the operator:</li> </ol> <pre><code>kubectl apply -f kustomize/manager/manager.yaml\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#basic-configuration","title":"Basic Configuration","text":"<p>The default configuration should work for most use cases. You can customize the installation using Helm values:</p> <pre><code># values.yaml\nreplicaCount: 1\n\nimage:\n  repository: firedoor\n  tag: latest\n  pullPolicy: IfNotPresent\n\nserviceAccount:\n  create: true\n  annotations: {}\n  name: \"\"\n\nrbac:\n  create: true\n\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n</code></pre>"},{"location":"getting-started/installation/#advanced-configuration","title":"Advanced Configuration","text":"<p>For production deployments, consider these settings:</p> <pre><code># production-values.yaml\nreplicaCount: 3\n\nimage:\n  tag: \"v1.0.0\"\n\nresources:\n  limits:\n    cpu: 1000m\n    memory: 1Gi\n  requests:\n    cpu: 500m\n    memory: 512Mi\n\nrbac:\n  create: true\n  # Add additional RBAC rules if needed\n\n# Enable monitoring\nmonitoring:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n\n# Enable telemetry\ntelemetry:\n  enabled: true\n  otel:\n    endpoint: \"http://otel-collector:4317\"\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>After installation, verify that Firedoor is working correctly:</p> <ol> <li>Check the operator pod:</li> </ol> <pre><code>kubectl get pods -l app.kubernetes.io/name=firedoor\n</code></pre> <ol> <li>Check the CRD:</li> </ol> <pre><code>kubectl get crd breakglasses.access.cloudnimbus.io\n</code></pre> <ol> <li>Test with a simple breakglass:</li> </ol> <pre><code>kubectl apply -f examples/breakglass-one-time.yaml\nkubectl get breakglasses\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Issue: Pod is not starting</p> <pre><code>kubectl describe pod -l app.kubernetes.io/name=firedoor\nkubectl logs -l app.kubernetes.io/name=firedoor\n</code></pre> <p>Issue: CRD not found</p> <pre><code>kubectl get crd | grep breakglass\n# If not found, reapply the CRD\nkubectl apply -f .generated/access.cloudnimbus.io_breakglasses.yaml\n</code></pre> <p>Issue: RBAC permissions</p> <pre><code>kubectl auth can-i create breakglasses\nkubectl auth can-i create rolebindings\n</code></pre>"},{"location":"getting-started/installation/#logs","title":"Logs","text":"<p>Check the operator logs for detailed information:</p> <pre><code>kubectl logs -l app.kubernetes.io/name=firedoor -f\n</code></pre>"},{"location":"getting-started/installation/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging by setting the log level:</p> <pre><code># In your values.yaml\nenv:\n  - name: LOG_LEVEL\n    value: \"debug\"\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Create your first breakglass</li> <li>Configuration - Configure Firedoor for your needs</li> <li>Examples - See real-world usage examples</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with Firedoor in 5 minutes!</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Firedoor installed in your cluster (see Installation)</li> <li>kubectl configured to access your cluster</li> <li>A user with cluster-admin permissions (for this example)</li> </ul>"},{"location":"getting-started/quick-start/#your-first-breakglass","title":"Your First Breakglass","text":"<p>Let's create a simple one-time breakglass access:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: my-first-breakglass\n  namespace: default\nspec:\n  schedule:\n    duration: \"30m\"  # Access expires in 30 minutes\n  clusterRoles:\n    - admin\n</code></pre> <p>Save this as <code>my-breakglass.yaml</code> and apply it:</p> <pre><code>kubectl apply -f my-breakglass.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#check-the-status","title":"Check the Status","text":"<p>View your breakglass:</p> <pre><code>kubectl get breakglasses\nkubectl describe breakglass my-first-breakglass\n</code></pre> <p>You should see the breakglass in <code>Pending</code> status, waiting for approval.</p>"},{"location":"getting-started/quick-start/#approve-the-access","title":"Approve the Access","text":"<p>Approve the breakglass to grant access:</p> <pre><code>kubectl patch breakglass my-first-breakglass --type='merge' -p='{\"spec\":{\"approval\":{\"required\":false}}}'\n</code></pre> <p>Or if approval is required, use:</p> <pre><code>kubectl patch breakglass my-first-breakglass --type='merge' -p='{\"status\":{\"conditions\":[{\"type\":\"Approved\",\"status\":\"True\",\"reason\":\"ManualApproval\",\"message\":\"Approved by admin\"}]}}'\n</code></pre>"},{"location":"getting-started/quick-start/#verify-access","title":"Verify Access","text":"<p>Check that the access was granted:</p> <pre><code>kubectl get breakglasses\nkubectl get rolebindings\nkubectl get clusterrolebindings\n</code></pre> <p>You should see:</p> <ul> <li>Breakglass status: <code>Active</code></li> <li>New RoleBinding/ClusterRoleBinding created</li> <li>Access granted for the specified duration</li> </ul>"},{"location":"getting-started/quick-start/#clean-up","title":"Clean Up","text":"<p>The access will automatically expire after 30 minutes, but you can also revoke it manually:</p> <pre><code>kubectl delete breakglass my-first-breakglass\n</code></pre>"},{"location":"getting-started/quick-start/#next-recurring-access","title":"Next: Recurring Access","text":"<p>Let's create a recurring breakglass for regular maintenance:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: maintenance-window\n  namespace: default\nspec:\n  schedule:\n    cron: \"0 2 * * 0\"  # Every Sunday at 2 AM\n    duration: \"4h\"      # 4-hour maintenance window\n    start: \"2024-01-01T00:00:00Z\"\n  clusterRoles:\n    - cluster-admin\n  approval:\n    required: false\n</code></pre> <p>Apply and monitor:</p> <pre><code>kubectl apply -f maintenance-breakglass.yaml\nkubectl get breakglasses -w\n</code></pre>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>Configuration Guide - Learn about all configuration options</li> <li>User Guide - Understand core concepts</li> <li>Examples - See more complex examples</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"getting-started/quick-start/#common-commands","title":"Common Commands","text":"<pre><code># List all breakglasses\nkubectl get breakglasses\n\n# Get detailed information\nkubectl describe breakglass &lt;name&gt;\n\n# Watch for changes\nkubectl get breakglasses -w\n\n# Check events\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# View logs\nkubectl logs -l app.kubernetes.io/name=firedoor\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":"<p>If something doesn't work as expected:</p> <ol> <li>Check the operator logs:</li> </ol> <pre><code>kubectl logs -l app.kubernetes.io/name=firedoor\n</code></pre> <ol> <li>Verify RBAC permissions:</li> </ol> <pre><code>kubectl auth can-i create breakglasses\nkubectl auth can-i create rolebindings\n</code></pre> <ol> <li>Check the breakglass status:</li> </ol> <pre><code>kubectl describe breakglass &lt;name&gt;\n</code></pre> <ol> <li>Look for events:</li> </ol> <pre><code>kubectl get events --field-selector involvedObject.name=&lt;breakglass-name&gt;\n</code></pre>"},{"location":"user-guide/concepts/","title":"Core Concepts","text":"<p>Understanding the key concepts behind Firedoor will help you use it effectively.</p>"},{"location":"user-guide/concepts/#breakglass","title":"Breakglass","text":"<p>A Breakglass is a temporary access grant that provides elevated permissions for a limited time. Think of it as a \"break glass in case of emergency\" mechanism for Kubernetes access.</p>"},{"location":"user-guide/concepts/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Time-limited: Access automatically expires after a specified duration</li> <li>Auditable: All access events are logged and tracked</li> <li>Controlled: Requires approval (configurable) before access is granted</li> <li>Secure: Integrates with Kubernetes RBAC for fine-grained permissions</li> </ul>"},{"location":"user-guide/concepts/#access-types","title":"Access Types","text":""},{"location":"user-guide/concepts/#one-time-access","title":"One-Time Access","text":"<p>Single-use access that expires after a specified duration:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: emergency-fix\nspec:\n  schedule:\n    duration: \"2h\"\n  clusterRoles:\n    - admin\n</code></pre>"},{"location":"user-guide/concepts/#recurring-access","title":"Recurring Access","text":"<p>Regular access windows for maintenance or operations:</p> <pre><code>apiVersion: access.cloudnimbus.io/v1alpha1\nkind: Breakglass\nmetadata:\n  name: weekly-maintenance\nspec:\n  schedule:\n    cron: \"0 2 * * 0\"  # Every Sunday at 2 AM\n    duration: \"4h\"\n  clusterRoles:\n    - cluster-admin\n</code></pre>"},{"location":"user-guide/concepts/#scheduling","title":"Scheduling","text":"<p>Firedoor supports flexible scheduling options:</p>"},{"location":"user-guide/concepts/#duration-based","title":"Duration-Based","text":"<p>Simple time-limited access:</p> <pre><code>schedule:\n  duration: \"1h\"  # Access expires in 1 hour\n</code></pre>"},{"location":"user-guide/concepts/#cron-based","title":"Cron-Based","text":"<p>Recurring access using cron expressions:</p> <pre><code>schedule:\n  cron: \"0 9 * * 1-5\"  # Weekdays at 9 AM\n  duration: \"8h\"\n  start: \"2024-01-01T00:00:00Z\"\n  end: \"2024-12-31T23:59:59Z\"\n</code></pre>"},{"location":"user-guide/concepts/#timezone-support","title":"Timezone Support","text":"<p>Specify timezone for accurate scheduling:</p> <pre><code>schedule:\n  cron: \"0 9 * * 1-5\"\n  location: \"America/New_York\"\n  duration: \"8h\"\n</code></pre>"},{"location":"user-guide/concepts/#permissions","title":"Permissions","text":""},{"location":"user-guide/concepts/#cluster-roles","title":"Cluster Roles","text":"<p>Grant cluster-wide permissions:</p> <pre><code>spec:\n  clusterRoles:\n    - admin\n    - cluster-admin\n    - view\n</code></pre>"},{"location":"user-guide/concepts/#namespace-specific-permissions","title":"Namespace-Specific Permissions","text":"<p>Fine-grained control with custom policies:</p> <pre><code>spec:\n  policy:\n    - namespace: \"production\"\n      rules:\n        - apiGroups: [\"apps\"]\n          resources: [\"deployments\"]\n          verbs: [\"get\", \"list\", \"update\"]\n    - namespace: \"staging\"\n      rules:\n        - apiGroups: [\"*\"]\n          resources: [\"*\"]\n          verbs: [\"*\"]\n</code></pre>"},{"location":"user-guide/concepts/#approval-process","title":"Approval Process","text":""},{"location":"user-guide/concepts/#automatic-approval","title":"Automatic Approval","text":"<p>For trusted scenarios:</p> <pre><code>spec:\n  approval:\n    required: false\n</code></pre>"},{"location":"user-guide/concepts/#manual-approval","title":"Manual Approval","text":"<p>Require explicit approval before access is granted:</p> <pre><code>spec:\n  approval:\n    required: true\n    approvers:\n      - \"admin@company.com\"\n      - \"security@company.com\"\n</code></pre>"},{"location":"user-guide/concepts/#lifecycle-states","title":"Lifecycle States","text":"<p>A breakglass goes through several states:</p> <ol> <li>Pending: Created but not yet approved (if approval required)</li> <li>Approved: Approved and ready for activation</li> <li>Active: Currently granting access</li> <li>Expired: Access has expired</li> <li>Failed: Error occurred during processing</li> </ol>"},{"location":"user-guide/concepts/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"user-guide/concepts/#events","title":"Events","text":"<p>Firedoor emits Kubernetes events for all state changes:</p> <pre><code>kubectl get events --field-selector involvedObject.kind=Breakglass\n</code></pre>"},{"location":"user-guide/concepts/#metrics","title":"Metrics","text":"<p>Built-in Prometheus metrics:</p> <ul> <li><code>firedoor_breakglass_total</code>: Total number of breakglasses</li> <li><code>firedoor_breakglass_active</code>: Currently active breakglasses</li> <li><code>firedoor_access_granted_total</code>: Total access grants</li> <li><code>firedoor_access_revoked_total</code>: Total access revocations</li> </ul>"},{"location":"user-guide/concepts/#logs","title":"Logs","text":"<p>Structured logging with correlation IDs:</p> <pre><code>kubectl logs -l app.kubernetes.io/name=firedoor | grep \"breakglass\"\n</code></pre>"},{"location":"user-guide/concepts/#security-considerations","title":"Security Considerations","text":""},{"location":"user-guide/concepts/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<ul> <li>Grant only the minimum permissions needed</li> <li>Use namespace-specific policies when possible</li> <li>Regularly review and audit access patterns</li> </ul>"},{"location":"user-guide/concepts/#time-limits","title":"Time Limits","text":"<ul> <li>Set appropriate duration limits</li> <li>Use recurring schedules for regular maintenance</li> <li>Implement maximum activation limits for recurring access</li> </ul>"},{"location":"user-guide/concepts/#audit-trail","title":"Audit Trail","text":"<ul> <li>All access events are logged</li> <li>Integration with SIEM systems</li> <li>Compliance reporting capabilities</li> </ul>"},{"location":"user-guide/concepts/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/concepts/#naming-conventions","title":"Naming Conventions","text":"<p>Use descriptive names that indicate purpose:</p> <pre><code>metadata:\n  name: \"emergency-database-access-2024-01-15\"\n  # or\n  name: \"weekly-maintenance-window\"\n</code></pre>"},{"location":"user-guide/concepts/#resource-organization","title":"Resource Organization","text":"<p>Group related breakglasses:</p> <pre><code>metadata:\n  name: \"prod-emergency-access\"\n  namespace: \"breakglass-system\"\n  labels:\n    environment: \"production\"\n    type: \"emergency\"\n</code></pre>"},{"location":"user-guide/concepts/#monitoring","title":"Monitoring","text":"<ul> <li>Set up alerts for failed breakglasses</li> <li>Monitor access patterns for anomalies</li> <li>Regular review of active breakglasses</li> </ul>"},{"location":"user-guide/concepts/#integration-points","title":"Integration Points","text":""},{"location":"user-guide/concepts/#cicd-pipelines","title":"CI/CD Pipelines","text":"<p>Integrate with deployment pipelines:</p> <pre><code># In your CI/CD pipeline\nkubectl apply -f breakglass-maintenance.yaml\n# ... perform maintenance ...\nkubectl delete breakglass maintenance-window\n</code></pre>"},{"location":"user-guide/concepts/#monitoring-systems","title":"Monitoring Systems","text":"<ul> <li>Prometheus metrics for alerting</li> <li>Grafana dashboards for visualization</li> <li>Integration with existing monitoring tools</li> </ul>"},{"location":"user-guide/concepts/#identity-providers","title":"Identity Providers","text":"<ul> <li>Integration with OIDC providers</li> <li>LDAP/Active Directory integration</li> <li>Multi-factor authentication support</li> </ul>"}]}
name: Sync Charts to Charts Repository

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'charts/firedoor/**'
      - 'api/v1alpha1/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'charts/firedoor/**'
      - 'api/v1alpha1/**'
  workflow_dispatch:

jobs:
  sync-charts:
    runs-on: ubuntu-latest
    steps:
    - name: Authenticate GitHub App
      id: auth
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.REPO_MIRROR_APP_ID }}
        private_key: ${{ secrets.REPO_MIRROR_PRIVATE_KEY }}

    - name: Checkout firedoor repository
      uses: actions/checkout@v4
      with:
        path: firedoor
        fetch-depth: 0

    - name: Checkout charts repository
      uses: actions/checkout@v4
      with:
        repository: Star-Nimbus/charts
        token: ${{ steps.auth.outputs.token }}
        path: charts
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Install controller-gen
      run: |
        cd firedoor
        go install sigs.k8s.io/controller-tools/cmd/controller-gen@latest

    - name: Generate CRDs and manifests
      run: |
        cd firedoor
        if [ -f "Makefile" ]; then
          make generate manifests || echo "Make targets completed with warnings"
        else
          echo "No Makefile found, skipping make targets"
        fi

    - name: Validate source charts directory
      run: |
        if [ ! -d "firedoor/charts/firedoor" ]; then
          echo "❌ Source charts directory not found: firedoor/charts/firedoor"
          exit 1
        fi
        echo "✅ Source charts directory found"

    - name: Copy synced charts to target repo
      run: |
        # Clean and copy charts
        rm -rf charts/firedoor
        cp -r firedoor/charts/firedoor charts/
        echo "✅ Charts copied successfully"

    - name: Determine version strategy
      id: version
      run: |
        cd charts/firedoor
        
        # Read source version from firedoor repo
        SOURCE_VERSION=$(yq eval '.version' Chart.yaml)
        echo "Source version: $SOURCE_VERSION"
        
        # Check if this is a dev version
        if [[ "$SOURCE_VERSION" == *"-dev."* ]] || [[ "$SOURCE_VERSION" == *"-alpha."* ]] || [[ "$SOURCE_VERSION" == *"-beta."* ]]; then
          echo "Source is a dev version, will create production version"
          
          # Extract base version (remove dev/alpha/beta suffix)
          BASE_VERSION=$(echo $SOURCE_VERSION | sed 's/-dev\.[0-9]*//' | sed 's/-alpha\.[0-9]*//' | sed 's/-beta\.[0-9]*//')
          echo "Base version: $BASE_VERSION"
          
          # Check if we have an existing production version
          if [ -f "../firedoor/Chart.yaml" ]; then
            EXISTING_VERSION=$(yq eval '.version' ../firedoor/Chart.yaml)
            echo "Existing production version: $EXISTING_VERSION"
            
            # Compare versions to determine if we need to bump
            if [ "$BASE_VERSION" = "$EXISTING_VERSION" ]; then
              # Same base version, this is a patch update
              MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
              MINOR=$(echo $BASE_VERSION | cut -d. -f2)
              PATCH=$(echo $BASE_VERSION | cut -d. -f3)
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            else
              # Different base version, use the new base version
              NEW_VERSION="$BASE_VERSION"
            fi
          else
            # No existing version, use base version
            NEW_VERSION="$BASE_VERSION"
          fi
          
          VERSION_STRATEGY="dev_to_prod"
        else
          echo "Source is a production version, will bump patch"
          
          # This is a production version, just bump patch
          MAJOR=$(echo $SOURCE_VERSION | cut -d. -f1)
          MINOR=$(echo $SOURCE_VERSION | cut -d. -f2)
          PATCH=$(echo $SOURCE_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          VERSION_STRATEGY="prod_bump"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "Strategy: $VERSION_STRATEGY"
        
        # Set outputs for next steps
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_strategy=$VERSION_STRATEGY" >> $GITHUB_OUTPUT
        echo "source_version=$SOURCE_VERSION" >> $GITHUB_OUTPUT

    - name: Update chart versions
      run: |
        cd charts/firedoor
        
        # Update version in Chart.yaml
        yq eval '.version = "'${{ steps.version.outputs.new_version }}'"' -i Chart.yaml
        
        # Update appVersion to match if it was the same as source version
        SOURCE_VERSION="${{ steps.version.outputs.source_version }}"
        CURRENT_APP_VERSION=$(yq eval '.appVersion' Chart.yaml)
        if [ "$CURRENT_APP_VERSION" = "$SOURCE_VERSION" ]; then
          yq eval '.appVersion = "'${{ steps.version.outputs.new_version }}'"' -i Chart.yaml
        fi
        
        echo "✅ Updated firedoor chart to version ${{ steps.version.outputs.new_version }}"
        echo "Strategy: ${{ steps.version.outputs.version_strategy }}"

    - name: Install Helm and validate charts
      run: |
        curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        cd charts/firedoor
        
        # Update dependencies
        if [ -f "Chart.lock" ] || [ -d "charts" ]; then
          helm dependency update
        fi
        
        # Lint the chart
        helm lint . || {
          echo "❌ Helm lint failed"
          exit 1
        }
        
        # Test template rendering
        helm template test . > /tmp/test-output.yaml || {
          echo "❌ Helm template failed"
          exit 1
        }
        
        echo "✅ Chart templates rendered successfully"
        echo "Generated templates:"
        head -20 /tmp/test-output.yaml

    - name: Create Pull Request
      id: create-pr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ steps.auth.outputs.token }}
        path: charts
        commit-message: "feat: sync charts from firedoor@${{ github.sha }}"
        title: "Sync Helm charts from firedoor"
        body: |
          ## Automatic Chart Sync
          
          This PR automatically syncs the Helm charts from the firedoor repository.
          
          **Source**: `Star-Nimbus/firedoor@${{ github.sha }}`
          **Trigger**: `${{ github.event_name }}`
          
          **Version Strategy**: ${{ steps.version.outputs.version_strategy }}
          **Source Version**: ${{ steps.version.outputs.source_version }}
          **New Version**: ${{ steps.version.outputs.new_version }}
          
          **Changes**
          - Copied `charts/firedoor` to the charts repo
          - Updated version: ${{ steps.version.outputs.source_version }} → ${{ steps.version.outputs.new_version }}
          - Validated templates with `helm template`
          
          **Validation**
          - [x] Helm lint passed
          - [x] Template rendering successful
          - [x] Chart dependencies updated
          
          ---
          
          This PR was created automatically by the sync-charts workflow.
        branch: sync-charts-${{ github.run_number }}
        delete-branch: true
        draft: false

    - name: Add labels to PR
      if: steps.create-pr.outputs.pull-request-number
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.auth.outputs.token }}
        script: |
          github.rest.issues.addLabels({
            owner: 'Star-Nimbus',
            repo: 'charts',
            issue_number: ${{ steps.create-pr.outputs.pull-request-number }},
            labels: ['automated', 'sync', 'firedoor']
          });

    - name: Notify on success
      if: success()
      run: |
        echo "✅ Charts successfully synced to charts repository"
        echo "Repository: https://github.com/Star-Nimbus/charts"
        echo "Version: ${{ steps.version.outputs.source_version }} → ${{ steps.version.outputs.new_version }}"
        if [ -n "${{ steps.create-pr.outputs.pull-request-url }}" ]; then
          echo "Pull Request: ${{ steps.create-pr.outputs.pull-request-url }}"
        fi

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Failed to sync charts to charts repository"
        echo "Check the workflow logs for details"
        exit 1

    - name: Cleanup
      if: always()
      run: |
        rm -rf temp-manifests/

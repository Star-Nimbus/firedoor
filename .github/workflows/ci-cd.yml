name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

# Cancel older, in‑flight runs on the same ref to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# ---------------------------------------------------------------------------
# 1. Lint stage – matrix fan‑out (Go, YAML, Helm)
# ---------------------------------------------------------------------------
jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [go, yaml, helm]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Common Go tool‑chain. NOP for yaml/helm targets.
      - name: Set up Go (cached)
        if: matrix.target == 'go'
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # Install golangci‑lint once per Go job (cached by actions/cache internally).
      - name: Install golangci-lint
        if: matrix.target == 'go'
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.57.2
          args: --timeout=10m --verbose

      - name: Run linters
        run: |
          case "${{ matrix.target }}" in
            go)
              make lint ;;
            yaml)
              pipx run yamllint -c .yamllint config/ ;;
            helm)
              pipx run shyaml -h >/dev/null 2>&1 || pipx install shyaml
              helm version || true
              helm lint $(find . -name Chart.yaml -exec dirname {} \;) ;;
          esac

  # -------------------------------------------------------------------------
  # 2. Unit tests (needs all lint targets)
  # -------------------------------------------------------------------------
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run unit tests with coverage
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cover.out
          flags: unittests

      - name: Persist coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: cover.out

  # -------------------------------------------------------------------------
  # 3. End‑to‑end tests inside Kind
  # -------------------------------------------------------------------------
  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    services:
      kind:
        image: kindest/node:v1.29.2
        options: >-
          --health-cmd="kubectl get nodes" --health-interval=30s --health-timeout=5s --health-retries=5
        ports:
          - 6443:6443
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Generate manifests
        run: make manifests

      - name: Run e2e tests
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: make test-e2e

  # -------------------------------------------------------------------------
  # 4. Build and push container image (only on push / release, not PR)
  # -------------------------------------------------------------------------
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      image: ${{ steps.meta.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Generate version / metadata
        id: meta
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION=$(scripts/version.sh version)
          fi
          COMMIT=$(scripts/version.sh commit)
          DATE=$(scripts/version.sh date)
          echo "version=$VERSION"       >> $GITHUB_OUTPUT
          echo "commit=$COMMIT"         >> $GITHUB_OUTPUT
          echo "date=$DATE"             >> $GITHUB_OUTPUT
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

      - name: Log in to GHCR via OIDC
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          logout: true

      - name: Set up Skaffold
        uses: skaffold/actions/setup@v2
        with:
          version: latest

      - name: Build & push image
        id: build
        env:
          KO_DOCKER_REPO: ${{ steps.meta.outputs.image }}
        run: |
          BUILD=$(skaffold build --profile=ci-cd \
            --tag ${{ steps.meta.outputs.version }} \
            --tag ${{ github.sha }} \
            --push --output='{{range .}}{{.Tag}}@{{.Digest}}{{end}}')
          echo "digest=$(echo $BUILD | cut -d'@' -f2)" >> $GITHUB_OUTPUT

  # -------------------------------------------------------------------------
  # 5. Semantic‑release (tag + changelog) – main branch only
  # -------------------------------------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs: [test, e2e-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  # -------------------------------------------------------------------------
  # 6. Deploy to dev (develop branch pushes)
  # -------------------------------------------------------------------------
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: skaffold/actions/setup@v2
        with:
          version: latest
      - name: Deploy to dev
        env:
          KO_DOCKER_REPO: ${{ needs.build.outputs.image }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          skaffold deploy --profile=dev \
            --images firedoor-operator=${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}

  # -------------------------------------------------------------------------
  # 7. Deploy to prod after successful release
  # -------------------------------------------------------------------------
  deploy-prod:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - uses: skaffold/actions/setup@v2
        with:
          version: latest
      - name: Deploy to production
        env:
          KO_DOCKER_REPO: ghcr.io/cloud-nimbus/firedoor
          VERSION: ${{ needs.release.outputs.new_release_version }}
        run: |
          skaffold deploy --images firedoor-operator=ghcr.io/cloud-nimbus/firedoor:${{ env.VERSION }}

  # -------------------------------------------------------------------------
  # 8. Security scan (Trivy) – runs in parallel to release/deploy
  # -------------------------------------------------------------------------
  security:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

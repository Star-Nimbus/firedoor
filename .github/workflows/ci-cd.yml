name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

# Cancel older, in‑flight runs on the same ref to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SKAFFOLD_VERSION: v2.11.0

# ---------------------------------------------------------------------------
# 1. Lint stage – matrix fan‑out (Go, Helm)
# ---------------------------------------------------------------------------
jobs:
  setup-skaffold:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Set up Skaffold
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.skaffold
          key: skaffold-${{ runner.os }}-${{ env.SKAFFOLD_VERSION }}
      - name: Install Skaffold
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/${{ env.SKAFFOLD_VERSION }}/skaffold-linux-amd64
          chmod +x skaffold
          mkdir -p ~/.skaffold
          mv skaffold ~/.skaffold/
      - name: Add Skaffold to PATH
        run: echo "$HOME/.skaffold" >> $GITHUB_PATH

  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [go, helm]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go (cached)
        if: matrix.target == 'go'
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Cache golangci-lint
        if: matrix.target == 'go'
        uses: actions/cache@v4
        with:
          path: bin/
          key: golangci-lint-${{ runner.os }}-${{ hashFiles('Makefile') }}
      - name: Install golangci-lint
        if: matrix.target == 'go'
        run: make golangci-lint
      - name: Run linters
        run: |
          case "${{ matrix.target }}" in
            go)
              make lint ;;
            helm)
              helm version || true
              helm lint $(find . -name Chart.yaml -exec dirname {} \;) ;;
          esac

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run unit tests with coverage
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cover.out
          flags: unittests

      - name: Persist coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: cover.out

  e2e-test:
    runs-on: ubuntu-latest
    needs: [test, setup-skaffold]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Cache kubectl and Kind
        id: cache-k8s-tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.kube
            /usr/local/bin/kubectl
            /usr/local/bin/kind
          key: k8s-tools-${{ runner.os }}-v1.29.2-v0.20.0

      - name: Install kubectl
        if: steps.cache-k8s-tools.outputs.cache-hit != 'true'
        uses: azure/setup-kubectl@v4

      - name: Install Kind
        if: steps.cache-k8s-tools.outputs.cache-hit != 'true'
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Set up Skaffold
        id: cache-skaffold
        uses: actions/cache@v4
        with:
          path: ~/.skaffold
          key: skaffold-${{ runner.os }}-${{ env.SKAFFOLD_VERSION }}

      - name: Install Skaffold
        if: steps.cache-skaffold.outputs.cache-hit != 'true'
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/${{ env.SKAFFOLD_VERSION }}/skaffold-linux-amd64
          chmod +x skaffold
          mkdir -p ~/.skaffold
          mv skaffold ~/.skaffold/

      - name: Add Skaffold to PATH
        run: echo "$HOME/.skaffold" >> $GITHUB_PATH

      - name: Run e2e tests
        run: |
          kind create cluster --name e2e-test --image kindest/node:v1.29.2 --wait 5m
          kubectl config use-context kind-e2e-test
          make test-e2e
      - name: Cleanup Kind cluster
        if: always()
        run: kind delete cluster --name e2e-test

  build:
    runs-on: ubuntu-latest
    needs: [test, setup-skaffold]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Generate version / metadata
        id: meta
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION=$(scripts/version.sh version)
          fi
          COMMIT=$(scripts/version.sh commit)
          DATE=$(scripts/version.sh date)
          echo "version=$VERSION"       >> $GITHUB_OUTPUT
          echo "commit=$COMMIT"         >> $GITHUB_OUTPUT
          echo "date=$DATE"             >> $GITHUB_OUTPUT
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

      - name: Log in to GHCR via GitHub App
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Build & push image
        id: build
        env:
          KO_DOCKER_REPO: ${{ steps.meta.outputs.image }}
        run: |
          BUILD=$(skaffold build --profile=ci-cd \
            --tag ${{ steps.meta.outputs.version }} \
            --tag ${{ github.sha }} \
            --push --output='{{range .}}{{.Tag}}@{{.Digest}}{{end}}')
          echo "digest=$(echo $BUILD | cut -d'@' -f2)" >> $GITHUB_OUTPUT

  tag-version:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute version
        id: ver
        run: echo "version=$(scripts/version.sh version)" >> $GITHUB_OUTPUT
      - name: Export version metadata
        run: |
          scripts/version.sh print > version.txt
          cat version.txt >> "$GITHUB_STEP_SUMMARY"
      - uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: version.txt
      - name: Tag commit
        run: |
          TAG=${{ steps.ver.outputs.version }}
          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi

  release:
    runs-on: ubuntu-latest
    needs: [test, e2e-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  security:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

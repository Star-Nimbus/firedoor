// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloud-nimbus/firedoor/internal/controller (interfaces: BreakglassOperator)
//
// Generated by this command:
//
//	mockgen -destination internal/controller/mocks/mock_operator.go -package mocks github.com/cloud-nimbus/firedoor/internal/controller BreakglassOperator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/cloud-nimbus/firedoor/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockBreakglassOperator is a mock of BreakglassOperator interface.
type MockBreakglassOperator struct {
	ctrl     *gomock.Controller
	recorder *MockBreakglassOperatorMockRecorder
}

// MockBreakglassOperatorMockRecorder is the mock recorder for MockBreakglassOperator.
type MockBreakglassOperatorMockRecorder struct {
	mock *MockBreakglassOperator
}

// NewMockBreakglassOperator creates a new mock instance.
func NewMockBreakglassOperator(ctrl *gomock.Controller) *MockBreakglassOperator {
	mock := &MockBreakglassOperator{ctrl: ctrl}
	mock.recorder = &MockBreakglassOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBreakglassOperator) EXPECT() *MockBreakglassOperatorMockRecorder {
	return m.recorder
}

// CleanupResources mocks base method.
func (m *MockBreakglassOperator) CleanupResources(arg0 context.Context, arg1 *v1alpha1.Breakglass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupResources", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupResources indicates an expected call of CleanupResources.
func (mr *MockBreakglassOperatorMockRecorder) CleanupResources(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupResources", reflect.TypeOf((*MockBreakglassOperator)(nil).CleanupResources), arg0, arg1)
}

// GrantAccess mocks base method.
func (m *MockBreakglassOperator) GrantAccess(arg0 context.Context, arg1 *v1alpha1.Breakglass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantAccess indicates an expected call of GrantAccess.
func (mr *MockBreakglassOperatorMockRecorder) GrantAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockBreakglassOperator)(nil).GrantAccess), arg0, arg1)
}

// RevokeAccess mocks base method.
func (m *MockBreakglassOperator) RevokeAccess(arg0 context.Context, arg1 *v1alpha1.Breakglass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAccess indicates an expected call of RevokeAccess.
func (mr *MockBreakglassOperatorMockRecorder) RevokeAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccess", reflect.TypeOf((*MockBreakglassOperator)(nil).RevokeAccess), arg0, arg1)
}

// ValidateAccess mocks base method.
func (m *MockBreakglassOperator) ValidateAccess(arg0 context.Context, arg1 *v1alpha1.Breakglass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAccess indicates an expected call of ValidateAccess.
func (mr *MockBreakglassOperatorMockRecorder) ValidateAccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccess", reflect.TypeOf((*MockBreakglassOperator)(nil).ValidateAccess), arg0, arg1)
}

# Lefthook configuration for Git hooks
# https://github.com/evilmartians/lefthook

# Global settings
skip_output:
  - meta
  - success

pre-commit:
  parallel: true
  commands:
    # Go code linting (fast mode)
    golangci-lint:
      glob: "*.go"
      run: make lint-fast
      stage_fixed: true

    # Go code formatting
    go-fmt:
      glob: "*.go"
      run: make fmt
      stage_fixed: true

    # Go code analysis
    go-vet:
      glob: "*.go"
      run: make vet

    # Helm chart linting
    helm-lint:
      glob: "**/Chart.yaml"
      run: make lint-helm

    # Check for TODO/FIXME comments
    todo-check:
      glob: "*.{go,yml,yaml,md}"
      run: |
        if git diff --cached --name-only | xargs grep -l "TODO\|FIXME" 2>/dev/null; then
          echo "Found TODO/FIXME comments. Consider addressing them before committing."
          exit 1
        fi

# Pre-push hook - runs before pushing
pre-push:
  commands:
    # Run full test suite
    test:
      run: make test

    # Run full linting
    lint:
      run: make lint

# Commit-msg hook - validates commit messages
commit-msg:
  commands:
    # Check commit message format
    commit-message:
      run: |
        commit_msg=$(cat "$1")
        if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|revert)(\(.+\))?: .+"; then
          echo "Commit message should follow conventional commits format:"
          echo "  <type>(<scope>): <description>"
          echo ""
          echo "Types: feat, fix, docs, style, refactor, test, chore, ci, build, perf, revert"
          echo "Example: feat(controller): add new breakglass validation"
          echo ""
          echo "Current message: $commit_msg"
          exit 1

# Post-commit hook - runs after commit
post-commit:
  commands:
    # Show commit summary
    commit-summary:
      run: |
        echo "Commit successful!"
        echo "Commit: $(git log -1 --pretty=format:'%h - %s')"
        echo "Author: $(git log -1 --pretty=format:'%an')"
        echo "Date: $(git log -1 --pretty=format:'%ad')"

# Post-merge hook - runs after merge
post-merge:
  commands:
    # Update dependencies after merge
    update-deps:
      run: |
        echo "Updating dependencies after merge..."
        go mod tidy
        go mod download

# Post-checkout hook - runs after checkout
post-checkout:
  commands:
    # Rebuild tools after branch switch
    rebuild-tools:
      run: |
        echo "Rebuilding development tools..."
        make envtest 